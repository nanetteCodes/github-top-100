{"version":3,"sources":["components/Header/Header.jsx","components/Card/Card.jsx","components/Modal/Modal.jsx","components/ModalError/ModalError.jsx","components/RepoItem/RepoItem.jsx","components/LoadingSpinner/LoadingSpinner.jsx","components/Repos/Repos.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","Card","repoName","repoUrl","starCount","handleClick","id","target","rel","href","icon","faStar","onClick","propType","PropTypes","string","isRequired","func","Modal","commitData","handleClose","showHideClass","show","faTimes","style","overflow","height","map","commit","key","node_id","src","author","avatar_url","alt","message","name","date","html_url","ModalError","RepoItem","state","commitUrl","modal","a","async","twentyFourAgo","Date","getTime","setState","fetch","res","json","data","ok","Error","statusText","console","log","alert","hideModal","repos","this","props","repo","stargazers_count","commits_url","split","length","Component","LoadingSpinner","Repos","loading","items","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90a20179.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\nfunction Header() {\n   return <div className='header'>Github Top 100</div>;\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport './card.scss';\n\nconst Card = ({ repoName, repoUrl, starCount, handleClick, id }) => {\n   return (\n      <div className='card' id={id}>\n         <div className='card-body'>\n            <h5 className='card-title'>{repoName}</h5>\n            <a\n               className='card-url'\n               target='_blank'\n               rel='noopener noreferrer'\n               href={repoUrl}\n            >\n               View Repository\n            </a>\n            <div className='card-star--container'>\n               <FontAwesomeIcon icon={faStar} />\n               <span className='card-stars'>{starCount}</span>\n            </div>\n         </div>\n\n         <button className='card-button' onClick={handleClick}>\n            Commits\n         </button>\n      </div>\n   );\n};\n\nCard.propType = {\n   repoName: PropTypes.string.isRequired,\n   repoUrl: PropTypes.string.isRequired,\n   starCount: PropTypes.string.isRequired,\n   handleClick: PropTypes.func.isRequired,\n   id: PropTypes.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport './modal.scss';\n\nconst Modal = ({\n   commitData, \n   handleClose, \n   show   \n}) => {\n   const showHideClass = show ? 'modal display-block' : 'modal display-none';\n\n   return (\n      <div className={showHideClass}>\n         <div className='modal-main'>\n            <button onClick={handleClose}>\n               <FontAwesomeIcon icon={faTimes} />\n            </button>\n            <h1 className='modal-title'>Commits Made</h1>\n            <div style={{ overflow: 'auto', height: '68vh' }}>  \n               {commitData.map(commit => (          \n                  <div className='modal-item' key ={commit.node_id} id={commit.node_id}>\n                     <img src={commit.author.avatar_url} alt={commit.commit.message} />\n                     <div className='modal-item--body'>\n                        <h2>{commit.commit.author.name}</h2>\n                        <h4>Time: {commit.commit.author.date}</h4>\n                        <p>\n                           <strong>Message:</strong> {commit.commit.message}\n                        </p>\n                        <a\n                           href={commit.html_url}\n                           target='_blank'\n                           rel='noopener noreferrer'\n                        >\n                           View Commit\n                        </a>\n                     </div>\n                  </div>       \n               ))} \n            </div>\n         </div>\n      </div>\n   );\n};\n\nModal.propTypes = {\n   commitData: PropTypes.array.isRequired,\n   handleClose: PropTypes.func.isRequired,\n   show: PropTypes.bool.isRequired,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport '../Modal/modal.scss';\n\nconst ModalError = ({ handleClose, show, message }) => {\n   const showHideClass = show ? 'modal display-block' : 'modal display-none';\n\n   return (\n      <div className={showHideClass}>\n         <div className='modal-main'>\n            <div style={{ overflow: 'auto', height: '75vh' }}>\n               <button onClick={handleClose}>\n                  <FontAwesomeIcon icon={faTimes} />\n               </button>\n               <h1 className='modal-title'>{message}</h1>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nModalError.propTypes = {\n   handleClose: PropTypes.func.isRequired,\n   show: PropTypes.bool.isRequired,\n   message: PropTypes.string,\n};\n\nexport default ModalError;\n","import React, { Component } from 'react';\nimport Card from '../Card/Card';\nimport Modal from '../Modal/Modal';\nimport ModalError from '../ModalError/ModalError';\nimport PropTypes from 'prop-types';\n\nexport default class RepoItem extends Component {\n   state = {\n      commitUrl: '',\n      commitData: [],\n      modal: false,\n   };\n\n   handleClick = async commitUrl => {\n      const twentyFourAgo = new Date(\n         new Date().getTime() - 24 * 60 * 60 * 1000,\n      );\n      this.setState({ commitUrl });\n\n      try {\n         const res = await fetch(`${commitUrl}?since=${twentyFourAgo}`);\n         const data = await res.json();\n         if (!res.ok) {\n            throw Error(res.statusText);\n         }\n         this.setState({ commitData: data, modal: true });\n      } catch (err) {\n         console.log(err);\n         alert(err);\n      }\n   };\n\n   hideModal = () => {\n      this.setState({ modal: false });\n   };\n\n   render() {\n      const { repos } = this.props;\n      const { commitData } = this.state;\n      const emptyMsg = 'No Commits Made For 24 Hours';\n      return (\n         <>\n            {repos.map(repo => (\n               <Card\n                  key={repo.id}\n                  repoName={repo.name}\n                  repoUrl={repo.html_url}\n                  starCount={repo.stargazers_count}\n                  handleClick={() =>\n                     this.handleClick(repo.commits_url.split('{')[0])\n                  }\n               />\n            ))}\n            {commitData.length ? (               \n                  <Modal\n                     commitData={commitData}\n                     show={this.state.modal}\n                     handleClose={this.hideModal}\n                  />               \n            ) : (\n               <ModalError\n                  message={emptyMsg}\n                  show={this.state.modal}\n                  handleClose={this.hideModal}\n               />\n            )}\n         </>\n      );\n   }\n}\n\nRepoItem.propTypes = {\n   repos: PropTypes.array.isRequired,\n};\n","import React from 'react';\nimport './loadingSpinner.scss';\n\nconst LoadingSpinner = () => {\n   return <div className='loader' />;\n};\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport RepoItem from '../RepoItem/RepoItem';\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\n\nexport default class Repos extends Component {\n   state = {\n      repos: [],\n      loading: false,\n   };\n   async componentDidMount() {\n      try {\n         this.setState({ loading: true });\n         const res = await fetch(\n            'https://api.github.com/search/repositories?q=stars&sort=stars&order=desc&per_page=100',\n         );\n         const data = await res.json();\n         if (!res.ok) {\n            throw Error(res.statusText);\n         }\n         this.setState({ repos: data.items, loading: false });\n      } catch (err) {\n         console.log(err);\n      }\n   }\n\n   render() {\n      const { repos, loading } = this.state;\n      return (\n         <>\n            {loading ? <LoadingSpinner /> : null}\n            <div className='container grid'>\n               <RepoItem repos={repos} />\n            </div>\n         </>\n      );\n   }\n}\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Repos from '../Repos/Repos';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Repos />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}